#include <stdio.h>
#include <string.h>

static long int crv_tab[256];
static long int cbu_tab[256];
static long int cgu_tab[256];
static long int cgv_tab[256];
static long int tab_76309[256];
static unsigned char clp[1024];   //for clip in CCIR601   

unsigned char ClipChannelValue(unsigned char yuv_color_channel, unsigned char min_val, unsigned char  max_val)
{
	if (yuv_color_channel > max_val)
	{
		return max_val;
	}
	else if (yuv_color_channel < min_val)
	{
		return min_val;
	}
	else
	{
		return yuv_color_channel;
	}
}

//RGB×ªYUV»»Ëã¹«Ê½
void rgb2yuv(unsigned char *y, unsigned char *u, unsigned char *v, unsigned char r, unsigned char g, unsigned char b)
{
	*y = (unsigned char)((66 * r + 129 * g + 25 * b + 128) >> 8) + 16;
	*u = (unsigned char)((-38 * r - 74 * g + 112 * b + 128) >> 8) + 128;
	*v = (unsigned char)((112 * r - 94 * g - 18 * b + 128) >> 8) + 128;
}

void init_yuv420p_table()
{
	long int crv, cbu, cgu, cgv;
	int i, ind;

	crv = 104597; cbu = 132201;  /* fra matrise i global.h */
	cgu = 25675;  cgv = 53279;

	for (i = 0; i < 256; i++)
	{
		crv_tab[i] = (i - 128) * crv;
		cbu_tab[i] = (i - 128) * cbu;
		cgu_tab[i] = (i - 128) * cgu;
		cgv_tab[i] = (i - 128) * cgv;
		tab_76309[i] = 76309 * (i - 16);
	}

	for (i = 0; i < 384; i++)
		clp[i] = 0;
	ind = 384;
	for (i = 0; i < 256; i++)
		clp[ind++] = i;
	ind = 640;
	for (i = 0; i < 384; i++)
		clp[ind++] = 255;
}

void nv212rgb24(unsigned char* yuvbuffer, unsigned char* rgbbuffer, int width, int height)
{
	int y1, y2, u, v;
	unsigned char *py1, *py2;
	int i, j, c1, c2, c3, c4;
	unsigned char *d1, *d2;
	unsigned char *src_u;
	//unsigned char *src_v;
	static int init_yuv420p = 0;

	src_u = yuvbuffer + width * height;   // vu
	//src_v = src_u + width * height / 4;

	py1 = yuvbuffer;   // y
	py2 = py1 + width;
	d1 = rgbbuffer;
	d2 = d1 + 3 * width;

	if (init_yuv420p == 0)
	{
		init_yuv420p_table();
		init_yuv420p = 1;
	}

	for (j = 0; j < height; j += 2)
	{
		for (i = 0; i < width; i += 2)
		{
			v = *src_u++;
			u = *src_u++;

			c1 = crv_tab[v];
			c2 = cgu_tab[u];
			c3 = cgv_tab[v];
			c4 = cbu_tab[u];

			//up-left   
			y1 = tab_76309[*py1++];
			*d1++ = clp[384 + ((y1 + c1) >> 16)];
			*d1++ = clp[384 + ((y1 - c2 - c3) >> 16)];
			*d1++ = clp[384 + ((y1 + c4) >> 16)];

			//down-left   
			y2 = tab_76309[*py2++];
			*d2++ = clp[384 + ((y2 + c1) >> 16)];
			*d2++ = clp[384 + ((y2 - c2 - c3) >> 16)];
			*d2++ = clp[384 + ((y2 + c4) >> 16)];

			//up-right   
			y1 = tab_76309[*py1++];
			*d1++ = clp[384 + ((y1 + c1) >> 16)];
			*d1++ = clp[384 + ((y1 - c2 - c3) >> 16)];
			*d1++ = clp[384 + ((y1 + c4) >> 16)];

			//down-right   
			y2 = tab_76309[*py2++];
			*d2++ = clp[384 + ((y2 + c1) >> 16)];
			*d2++ = clp[384 + ((y2 - c2 - c3) >> 16)];
			*d2++ = clp[384 + ((y2 + c4) >> 16)];
		}
		d1 += 3 * width;
		d2 += 3 * width;
		py1 += width;
		py2 += width;
	}
}

void bgr2nv21(unsigned char *rgb_buf, int width, int height, unsigned char *nv21_buf)
{
	unsigned char *ptr_y1, *ptr_y2, *ptr_vu, *ptr_bgr1, *ptr_bgr2;
	memset(nv21_buf, 0, width*height * 3 / 2);
	ptr_y1 = nv21_buf;
	ptr_y2 = nv21_buf + width;
	ptr_vu = nv21_buf + width * height;

	unsigned char y, v, u, r1, g1, b1, r2, g2, b2;
	ptr_bgr1 = rgb_buf;
	ptr_bgr2 = rgb_buf + width * 3;

	int flag = 0;
	if (height % 2 != 0)
	{
		height -= 1;
	}
	if (width % 2 != 0)
	{
		width -= 1;
		flag = 1;
	}

	int j = 0;
	for (j = 0; j < height; j += 2)
	{
		int i = 0;
		for (i = 0; i < width; i++)
		{
			b1 = *(ptr_bgr1++);
			g1 = *(ptr_bgr1++);
			r1 = *(ptr_bgr1++);

			rgb2yuv(&y, &u, &v, r1, g1, b1);
			*(ptr_y1++) = ClipChannelValue(y, 0, 255);
			if (i % 2 == 0)
			{
				*(ptr_vu++) = ClipChannelValue(v, 0, 255);
			}
			b2 = *(ptr_bgr2++);
			g2 = *(ptr_bgr2++);
			r2 = *(ptr_bgr2++);
			rgb2yuv(&y, &u, &v, r2, g2, b2);
			*(ptr_y2++) = ClipChannelValue(y, 0, 255);
			if (i % 2 == 0)
			{
				*(ptr_vu++) = ClipChannelValue(u, 0, 255);
			}
		}
		if (flag == 1)
		{
			ptr_bgr1 += 3 * (width + 2);
			ptr_bgr2 += 3 * (width + 2);
			ptr_y1 += (width + 2);
			ptr_y2 += (width + 2);
			ptr_vu += 1;
		}

		else
		{
			ptr_bgr1 += 3 * width;
			ptr_bgr2 += 3 * width;
			ptr_y1 += width;
			ptr_y2 += width;
		}

	}
}
